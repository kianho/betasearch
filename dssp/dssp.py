#!/usr/bin/env python
# encoding: utf-8
"""

Description:
    This module parses the protein chains from DSSP output of a PDB file. I
    created this module because I'd found that the DSSP parsing in Bio.PDB did
    not parse enough of the information generated by DSSP---i.e. hydrogen
    bonding, bridge partners etc.---therefore, this module fills these gaps. I
    will perhaps try to merge some of these functions into the main BioPython
    source code branch.

"""

import os
import sys
import Bio.PDB
import json
import numpy

from itertools import imap
from subprocess import Popen, PIPE
from collections import OrderedDict, defaultdict

from Bio.PDB import PDBParser, DSSP, calc_dihedral
from Bio.PDB.Vector import Vector
from Bio.PDB.Polypeptide import three_to_one


class DSSPChain(object):
    """A single protein chain parsed from DSSP output.

    """

    def __init__(self, raw_chain):
        """Constructor.

        Args:
            raw_chain:

        """

        self.residues = raw_chain
        self.pdb_resid_dict = {}

        for ord_index, res in enumerate(self.residues):
            res.ord_index = ord_index
            self.pdb_resid_dict[res.pdb_resid] = res

        return

    def __iter__(self):
        return iter(self.residues)

    def __getitem__(self, pdb_resid):
        return self.pdb_resid_dict[pdb_resid]

    def get_pdb_id(self):
        return os.path.basename(self.residues[0].full_id[0]).split(".")[0]

    def get_seq(self):
        """Get the one-letter amino acid sequence.

        """
        return "".join(imap(three_to_one,
                            (r.get_resname() for r in self.residues)))

    def get_ss_seq(self):
        """Get the (8-state) DSSP secondary structure sequence.

        """
        return "".join(r.ss for r in self.residues)


class DSSPProtein(object):
    """A single protein parsed from DSSP output (consists of one or more
    chains).

    """

    def __init__(self, pdb_fn):
        """Constructor.

        Args:
            pdb_fn: Path to a PDB file.

        """

        self.dssp = None
        self.chains = {}

        self.parse_dssp(pdb_fn)

        return

    def __getitem__(self, chain_id):
        return self.chains[chain_id]

    def parse_dssp(self, pdb_fn, interchain_bps=False):
        """Parse the output of DSSP when run on a single PDB file.

        Args:
            pdb_fn: Path to a PDB file.
            interchain_bps: True if considering bridge-pairings between chains (optional).

        Returns:
            None

        """

        struct = PDBParser().get_structure(pdb_fn, pdb_fn)
        model = struct[0]
        dssp = DSSP(model, pdb_fn)
        
        # Map each PDB resid to the corresponding DSSP residue information.
        pdb_resid_to_dssp_info = OrderedDict()

        # Map each DSSP index to the corresponding DSSP residue information.
        dssp_index_to_dssp_info = OrderedDict()

        # Begin parsing the DSSP output.
        #
        # TODO:
        # - refactor these DSSP-related code blocks to use BioPython's DSSP
        #   parsing instead.
        with Popen(("dsspcmbi %s" % pdb_fn).split(), stdout=PIPE).stdout as f:

            # Skip the column header line.
            for line in f:
                if line.strip().startswith("#  RESIDUE"):
                    break

            for line in f:
                # Skip chain breaks.
                if line[13] == "!":
                    continue

                pdb_resseq = int(line[5:10])
                pdb_icode = line[10]
                pdb_resid = (pdb_resseq, pdb_icode)
                dssp_index = int(line[:5])
                bp1 = int(line[25:29])
                bp2 = int(line[29:33])

                hb_don_1 = int(line[38:45])
                hb_don_1_energy = float(line[46:50])
                hb_don_1_dssp_index = dssp_index + hb_don_1 if hb_don_1 != 0 else None

                hb_acc_1 = int(line[50:56])
                hb_acc_1_energy = float(line[57:61])
                hb_acc_1_dssp_index = dssp_index + hb_acc_1 if hb_acc_1 != 0 else None

                hb_don_2 = int(line[61:67])
                hb_don_2_energy = float(line[68:72])
                hb_don_2_dssp_index = dssp_index + hb_don_2 if hb_don_2 != 0 else None

                hb_acc_2 = int(line[72:78])
                hb_acc_2_energy = float(line[57:61])
                hb_acc_2_dssp_index = dssp_index + hb_acc_2 if hb_acc_2 != 0 else None

                pdb_resid_to_dssp_info[pdb_resid] = \
                dssp_index_to_dssp_info[dssp_index] = \
                    { "dssp_index" : dssp_index,
                      "bp1" : bp1, "bp2" : bp2,
                      "hb_don_1_dssp_index" : hb_don_1_dssp_index,
                      "hb_don_1_energy" : hb_don_1_energy,
                      "hb_acc_1_dssp_index" : hb_acc_1_dssp_index,
                      "hb_acc_1_energy" : hb_acc_1_energy,
                      "hb_don_2_dssp_index" : hb_don_2_dssp_index,
                      "hb_don_2_energy" : hb_don_2_energy,
                      "hb_acc_2_dssp_index" : hb_acc_2_dssp_index,
                      "hb_acc_2_energy" : hb_acc_2_energy }

        # Map each DSSP index to its Bio.PDB.Residue object.                
        dssp_index_to_res = {}

        # Update each Bio.PDB.Residue with its DSSP information.
        for val in dssp:
            res = val[0]
            ss = val[1]

            pdb_resid = res.id[1:]
            dssp_info = pdb_resid_to_dssp_info[pdb_resid]

            res.dssp_index = dssp_info["dssp_index"]
            res.ss = ss

            dssp_index_to_res[res.dssp_index] = res

        raw_chains = defaultdict(list)

        for res in (x[0] for x in dssp):
            pdb_resid = res.id[1:]
            dssp_info = pdb_resid_to_dssp_info[pdb_resid]

            bp1_res = dssp_index_to_res.get(dssp_info["bp1"], None)
            bp2_res = dssp_index_to_res.get(dssp_info["bp2"], None)

            # Ignore interchain bridge partners if required.
            if bp1_res and not interchain_bps:
                if bp1_res.chain_id != res.chain_id:
                    bp1_res = None

            if bp2_res and not interchain_bps:
                if bp2_res.chain_id != res.chain_id:
                    bp2_res = None

            hb_don_1_dssp_index = dssp_info["hb_don_1_dssp_index"]
            hb_don_1_dssp_index = dssp_info["hb_don_1_dssp_index"]

            hb_acc_1_dssp_index = dssp_info["hb_acc_1_dssp_index"]
            hb_acc_1_dssp_index = dssp_info["hb_acc_1_dssp_index"]

            hb_don_2_dssp_index = dssp_info["hb_don_2_dssp_index"]
            hb_don_2_dssp_index = dssp_info["hb_don_2_dssp_index"]

            hb_acc_2_dssp_index = dssp_info["hb_acc_2_dssp_index"]
            hb_acc_2_dssp_index = dssp_info["hb_acc_2_dssp_index"]

            hb_don_1_energy = dssp_info["hb_don_1_energy"]
            hb_don_1_energy = dssp_info["hb_don_1_energy"]

            hb_acc_1_energy = dssp_info["hb_acc_1_energy"]
            hb_acc_1_energy = dssp_info["hb_acc_1_energy"]

            hb_don_2_energy = dssp_info["hb_don_2_energy"]
            hb_don_2_energy = dssp_info["hb_don_2_energy"]

            hb_acc_2_energy = dssp_info["hb_acc_2_energy"]
            hb_acc_2_energy = dssp_info["hb_acc_2_energy"]

            hb_don_1_res = dssp_index_to_res.get(hb_don_1_dssp_index, None)
            hb_don_2_res = dssp_index_to_res.get(hb_don_2_dssp_index, None)

            hb_acc_1_res = dssp_index_to_res.get(hb_acc_1_dssp_index, None)
            hb_acc_2_res = dssp_index_to_res.get(hb_acc_2_dssp_index, None)

            # TODO:
            # - Replace these lines with more elegant code.
            res.bp1 = bp1_res
            res.bp2 = bp2_res

            res.hb_don_1_res = hb_don_1_res
            res.hb_don_2_res = hb_don_2_res

            res.hb_acc_1_res = hb_acc_1_res
            res.hb_acc_2_res = hb_acc_2_res

            res.hb_don_1_dssp_index = hb_don_1_dssp_index
            res.hb_don_2_dssp_index = hb_don_2_dssp_index

            res.hb_acc_1_dssp_index = hb_acc_1_dssp_index
            res.hb_acc_2_dssp_index = hb_acc_2_dssp_index

            res.hb_don_1_energy = hb_don_1_energy
            res.hb_don_2_energy = hb_don_2_energy

            res.hb_acc_1_energy = hb_acc_1_energy
            res.hb_acc_2_energy = hb_acc_2_energy

            raw_chains[res.chain_id].append(res)

        for chain_id, raw_chain in raw_chains.iteritems():
            self.chains[chain_id] = DSSPChain(raw_chain)

        self.dssp = dssp

        return


if __name__ == "__name__":
    pass

